// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  @@map("users")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId              String    @map("_user_id") @db.ObjectId // Update this to match your data model
  type               String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.String
  access_token       String?   @db.String
  expires_at         Int?
  scope              String?
  id_token           String? @db.String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?  @map("_user_id") @db.ObjectId // Update this to match your data model
  sessionToken String   @db.String @map("session_token") @unique
  accessToken  String?  @db.String @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  imageUrl    String?
  publicId    String?
  catName     String?
  category    Category? @relation(fields: [catName], references: [catName])
  author      User     @relation(fields: [authorEmail], references: [email])
  authorEmail String
  links       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  catName    String @unique
  posts      Post[]
  postIds    String[] @db.ObjectId
}